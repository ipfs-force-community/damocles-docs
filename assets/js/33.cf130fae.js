(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{399:function(a,e,r){"use strict";r.r(e);var s=r(17),o=Object(s.a)({},(function(){var a=this,e=a.$createElement,r=a._self._c||e;return r("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[r("h1",{attrs:{id:"自定义算法和存储方案"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#自定义算法和存储方案"}},[a._v("#")]),a._v(" 自定义算法和存储方案")]),a._v(" "),r("h2",{attrs:{id:"概述"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#概述"}},[a._v("#")]),a._v(" 概述")]),a._v(" "),r("p",[r("strong",[a._v("damocles")]),a._v(" 希望在提供一套健壮的算力生产方案的同时，允许使用者最大限度地根据实际情况调配和定制自己的使用方式，其中就包括自定义算法和存储方案。")]),a._v(" "),r("p",[a._v("例如，使用者可以选择：")]),a._v(" "),r("ul",[r("li",[a._v("使用开源的优化算法")]),a._v(" "),r("li",[a._v("购买付费授权的闭源算法")]),a._v(" "),r("li",[a._v("购买外包计算服务")]),a._v(" "),r("li",[a._v("使用对象存储（如 S3）作为自己的持久化存储方案")])]),a._v(" "),r("p",[a._v("等，并将这些定制方案以极小的成本集成到 damocles 中。")]),a._v(" "),r("h2",{attrs:{id:"使用"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#使用"}},[a._v("#")]),a._v(" 使用")]),a._v(" "),r("p",[a._v("对于自定义算法和存储方案的使用，"),r("code",[a._v("SP")]),a._v(" 和开发者需要关注不同的内容。这里我们会分开阐述。")]),a._v(" "),r("h3",{attrs:{id:"sp"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#sp"}},[a._v("#")]),a._v(" SP")]),a._v(" "),r("p",[a._v("对于 "),r("code",[a._v("SP")]),a._v(" 来说，只需要关注如何将自定义的内容集成到算力生成过程中。这里主要分成多个部分：")]),a._v(" "),r("h3",{attrs:{id:"damocles-worker-上的-ext-processors"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#damocles-worker-上的-ext-processors"}},[a._v("#")]),a._v(" damocles-worker 上的 ext-processors")]),a._v(" "),r("p",[a._v("关于 damocles-worker 上的 ext-processors，可以通过以下步骤集成：")]),a._v(" "),r("ol",[r("li",[a._v("准备好符合交互协议的可执行文件")]),a._v(" "),r("li",[a._v("在 damocles-worker 配置文件中的 "),r("code",[a._v("[[processors.{stage_name}]]")]),a._v(" 块中正确地配上要启用的阶段、可执行文件位置、参数、环境变量等")]),a._v(" "),r("li",[a._v("启动 damocles-worker 并检查自定义外部处理器的工作情况")])]),a._v(" "),r("p",[a._v("这部分内容可以参考：")]),a._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"damocles-manager-config"}},[a._v("07.damocles-worker外部执行器的配置范例")])]),a._v(" "),r("li",[r("a",{attrs:{href:"damocles-manager-config"}},[a._v("03.damocles-worker的配置解析")])])]),a._v(" "),r("h3",{attrs:{id:"damocles-manager-上的-ext-provers"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#damocles-manager-上的-ext-provers"}},[a._v("#")]),a._v(" damocles-manager 上的 ext-provers")]),a._v(" "),r("p",[a._v("damocles-manager 上涉及算法定制的只有 wining post 和 window post 两部分，这两部分可以以 ext-prover 的形式进行定制，起作用机制、使用方法和 ext-processors 都很相似。")]),a._v(" "),r("p",[a._v("这部分内容可以参考：")]),a._v(" "),r("p",[r("a",{attrs:{href:"damocles-manager-config"}},[a._v("09.独立运行的poster节点#ext-prover-执行器")])]),a._v(" "),r("h3",{attrs:{id:"自定义存储方案"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#自定义存储方案"}},[a._v("#")]),a._v(" 自定义存储方案")]),a._v(" "),r("p",[a._v("自定义存储方案可以是完全的非文件系统存储方案，如对象存储等，也可以是基于传统的大规模文件系统方案的简化，如将 NFS 挂载简化为一种自定义的轻量数据访问方式。")]),a._v(" "),r("p",[a._v("相比 ext-processors、ext-provers 来说，支持自定义存储相对来说要复杂一些，这种复杂度主要体现在：")]),a._v(" "),r("ol",[r("li",[a._v("对自定义存储的支持涉及到多个场景，如扇区封装过程中的数据持久化阶段、扇区升级过程中的原始数据访问阶段、winning post、window post 等。")]),a._v(" "),r("li",[a._v("damocles-manager 和 damocles-worker 都涉及到和存储实例的一些交互行为。")])]),a._v(" "),r("p",[a._v("简单来说，为了能够使用某种自定义存储方案，需要至少进行：")]),a._v(" "),r("ol",[r("li",[a._v("为 damocles-worker 配置支持这种存储方案的 "),r("code",[a._v("transfer")]),a._v(" 阶段 ext-processor")]),a._v(" "),r("li",[a._v("为 damocles-manager 配置支持这种存储方案的 winning post 和 window post ext-prover")]),a._v(" "),r("li",[a._v("为 damocles-manager 配置支持这种存储方案的 objstore 插件，参考 "),r("a",{attrs:{href:"damocles-manager-config"}},[a._v("04.damocles-manager的配置解析")])])]),a._v(" "),r("p",[a._v("在具备上述条件后，damocles 即可基于定制化的存储方案工作。")]),a._v(" "),r("h3",{attrs:{id:"开发者"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#开发者"}},[a._v("#")]),a._v(" 开发者")]),a._v(" "),r("p",[a._v("对于开发者来说，最重要的事情是按照 damocles 已经定义好的一系列接口和协议，开发出适用的自定义组件，如外部处理器、golang 插件等。")]),a._v(" "),r("h4",{attrs:{id:"ext-processors-ext-provers"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#ext-processors-ext-provers"}},[a._v("#")]),a._v(" ext-processors / ext-provers")]),a._v(" "),r("p",[a._v("从开发层面来说， ext-processors 和 ext-provers 是同一类实现，使用在了不同的场景中。")]),a._v(" "),r("p",[a._v("它的基本原理，是一个可执行文件，满足：")]),a._v(" "),r("ul",[r("li",[a._v("父进程通过 stdin / stdout 进行交互")]),a._v(" "),r("li",[a._v("符合 "),r("a",{attrs:{href:"damocles-manager-config"}},[a._v("vc-processors")]),a._v(" 定义的交互协议和数据格式")])]),a._v(" "),r("p",[a._v("开发者可以通过以下步骤了解基本的开发过程：")]),a._v(" "),r("ol",[r("li",[a._v("了解原理和机制，参考 "),r("a",{attrs:{href:"damocles-manager-config"}},[a._v("vc-processors: examples")])]),a._v(" "),r("li",[a._v("为需要定制的阶段实现相应的算法，参考 "),r("a",{attrs:{href:"damocles-manager-config"}},[a._v("vc-processors: builtin/processors")])]),a._v(" "),r("li",[a._v("将已经实现的算法封装成可执行程序，参考 "),r("a",{attrs:{href:"damocles-manager-config"}},[a._v("vc-worker: subcommand/processors")])])]),a._v(" "),r("h4",{attrs:{id:"damocles-manager-objstore-plugin"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#damocles-manager-objstore-plugin"}},[a._v("#")]),a._v(" damocles-manager objstore plugin")]),a._v(" "),r("p",[a._v("它本质是 golang 的 plugin，满足：")]),a._v(" "),r("ul",[r("li",[a._v("满足 "),r("a",{attrs:{href:"damocles-manager-config"}},[a._v("golang plugin")]),a._v(" 的要求和限制")]),a._v(" "),r("li",[a._v("符合 "),r("a",{attrs:{href:"damocles-manager-config"}},[a._v("damocles-manager objstore")]),a._v(" 定义的接口和语义")])]),a._v(" "),r("p",[a._v("开发者可以通过以下步骤了解基本的开发过程：")]),a._v(" "),r("ol",[r("li",[a._v("了解 damocles-manager "),r("a",{attrs:{href:"damocles-manager-config"}},[a._v("插件框架")])]),a._v(" "),r("li",[a._v("了解接口定义和运作方式，参考："),r("a",{attrs:{href:"damocles-manager-config"}},[a._v("damocles-manager objstore: Store")]),a._v(" 和 "),r("a",{attrs:{href:"damocles-manager-config"}},[a._v("objstore: spi")])]),a._v(" "),r("li",[a._v("了解范例实现 "),r("a",{attrs:{href:"damocles-manager-config"}},[a._v("damocles-manager: plugin/fsstore")])])])])}),[],!1,null,null,null);e.default=o.exports}}]);