(window.webpackJsonp=window.webpackJsonp||[]).push([[49],{417:function(n,t,a){"use strict";a.r(t);var s=a(17),e=Object(s.a)({},(function(){var n=this,t=n.$createElement,a=n._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[a("h1",{attrs:{id:"damocles-worker-util-文档"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#damocles-worker-util-文档"}},[n._v("#")]),n._v(" damocles-worker-util 文档")]),n._v(" "),a("p",[n._v("damocles-worker-util 包含一组 damocles-worker 相关的实用工具. 其中包括:")]),n._v(" "),a("ul",[a("li",[n._v("hwinfo (Hardware information)")]),n._v(" "),a("li",[n._v("sealcalc (Sealing calculator)")])]),n._v(" "),a("h2",{attrs:{id:"hwinfo"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hwinfo"}},[n._v("#")]),n._v(" hwinfo")]),n._v(" "),a("p",[n._v("hwinfo 显示硬件信息, 我们可以根据输出的硬件信息合理的配置 damocles-worker, 以便于我们更有效地利用它们.")]),n._v(" "),a("p",[n._v("hwinfo 当前可获取的信息如下:")]),n._v(" "),a("ul",[a("li",[n._v("CPU 拓扑 (包括 CPU 核心数, NUMA Memory Node, CPU Cache 等)")]),n._v(" "),a("li",[n._v("磁盘信息")]),n._v(" "),a("li",[n._v("GPU 信息")]),n._v(" "),a("li",[n._v("内存信息")])]),n._v(" "),a("p",[n._v("参数说明:")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("damocles-worker-util-hwinfo\n显示硬件信息\n\nUSAGE:\n    damocles-worker-util hwinfo [OPTIONS]\n\nOPTIONS:\n        --full    显示完整的 CPU 拓扑信息\n    -h, --help    打印帮助信息\n")])])]),a("h3",{attrs:{id:"hwinfo-依赖安装"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hwinfo-依赖安装"}},[n._v("#")]),n._v(" hwinfo 依赖安装")]),n._v(" "),a("ul",[a("li",[n._v("hwloc 2.x 用于获取 CPU 拓扑信息")]),n._v(" "),a("li",[n._v("OpenCL 用于获取 GPU 信息")])]),n._v(" "),a("h4",{attrs:{id:"hwloc-2-x-安装"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hwloc-2-x-安装"}},[n._v("#")]),n._v(" hwloc 2.x 安装")]),n._v(" "),a("h5",{attrs:{id:"在-ubuntu-20-04-或之后的版本可以直接使用-apt-安装"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#在-ubuntu-20-04-或之后的版本可以直接使用-apt-安装"}},[n._v("#")]),n._v(" 在 Ubuntu 20.04 或之后的版本可以直接使用 "),a("code",[n._v("apt")]),n._v(" 安装")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v(" apt install hwloc=2.\\*\n")])])]),a("h5",{attrs:{id:"源码安装"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#源码安装"}},[n._v("#")]),n._v(" 源码安装：")]),n._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[n._v("# 安装必要的工具. ")]),n._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[n._v("apt")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[n._v("install")]),n._v(" -y "),a("span",{pre:!0,attrs:{class:"token function"}},[n._v("wget")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[n._v("make")]),n._v(" gcc\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[n._v("# 下载 hwloc-2.7.1.tar.gz")]),n._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[n._v("wget")]),n._v(" https://download.open-mpi.org/release/hwloc/v2.7/hwloc-2.7.1.tar.gz\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[n._v("tar")]),n._v(" -zxpf hwloc-2.7.1.tar.gz\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[n._v("cd")]),n._v(" hwloc-2.7.1\n./configure --prefix"),a("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v("/usr/local\n"),a("span",{pre:!0,attrs:{class:"token function"}},[n._v("make")]),n._v(" -j"),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[n._v("$(")]),n._v("nproc"),a("span",{pre:!0,attrs:{class:"token variable"}},[n._v(")")])]),n._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[n._v("sudo")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[n._v("make")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[n._v("install")]),n._v("\nldconfig /usr/local/lib\n")])])]),a("h4",{attrs:{id:"opencl-安装"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#opencl-安装"}},[n._v("#")]),n._v(" OpenCL 安装")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("apt install ocl-icd-opencl-dev\n")])])]),a("h3",{attrs:{id:"hwinfo-实例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hwinfo-实例"}},[n._v("#")]),n._v(" hwinfo 实例")]),n._v(" "),a("p",[n._v("在一台有 2 个 32 核 CPU 的机器上运行:")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("damocles-worker-util hwinfo\n")])])]),a("p",[n._v("输出:")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("CPU topology:\nMachine (503.55 GiB)\n├── Package (251.57 GiB) (*** *** *** 32-Core Processor)\n│   ├── NUMANode (#0 251.57 GiB)\n│   ├── L3 (#0 16 MiB)\n│   │   └── PU #0 + PU #1 + PU #2 + PU #3\n│   ├── L3 (#1 16 MiB)\n│   │   └── PU #4 + PU #5 + PU #6 + PU #7\n│   ├── L3 (#2 16 MiB)\n│   │   └── PU #8 + PU #9 + PU #10 + PU #11\n│   ├── L3 (#3 16 MiB)                       \n│   │   └── PU #12 + PU #13 + PU #14 + PU #15\n│   ├── L3 (#4 16 MiB)                       \n│   │   └── PU #16 + PU #17 + PU #18 + PU #19\n│   ├── L3 (#5 16 MiB)\n│   │   └── PU #20 + PU #21 + PU #22 + PU #23\n│   ├── L3 (#6 16 MiB)\n│   │   └── PU #24 + PU #25 + PU #26 + PU #27\n│   └── L3 (#7 16 MiB)\n│       └── PU #28 + PU #29 + PU #30 + PU #31\n└── Package (251.98 GiB) (*** *** *** 32-Core Processor)\n    ├── NUMANode (#1 251.98 GiB)\n    ├── L3 (#8 16 MiB)\n    │   └── PU #32 + PU #33 + PU #34 + PU #35\n    ├── L3 (#9 16 MiB)\n    │   └── PU #36 + PU #37 + PU #38 + PU #39\n    ├── L3 (#10 16 MiB)\n    │   └── PU #40 + PU #41 + PU #42 + PU #43\n    ├── L3 (#11 16 MiB)\n    │   └── PU #44 + PU #45 + PU #46 + PU #47\n    ├── L3 (#12 16 MiB)\n    │   └── PU #48 + PU #49 + PU #50 + PU #51\n    ├── L3 (#13 16 MiB)\n    │   └── PU #52 + PU #53 + PU #54 + PU #55\n    ├── L3 (#14 16 MiB)\n    │   └── PU #56 + PU #57 + PU #58 + PU #59\n    └── L3 (#15 16 MiB)\n        └── PU #60 + PU #61 + PU #62 + PU #63\n\nDisks:\n╭───────────┬─────────────┬─────────────┬────────────┬───────────────────────────────────────╮\n│ Disk type │ Device name │ Mount point │ Filesystem │                 Space                 │\n├───────────┼─────────────┼─────────────┼────────────┼───────────────────────────────────────┤\n│ SSD       │ /dev/sda3   │ /           │ ext4       │ 346.87 GiB / 434.68 GiB (79.80% used) │\n├───────────┼─────────────┼─────────────┼────────────┼───────────────────────────────────────┤\n│ SSD       │ /dev/sda2   │ /boot       │ ext4       │ 675.00 MiB / 3.87 GiB (17.01% used)   │\n├───────────┼─────────────┼─────────────┼────────────┼───────────────────────────────────────┤\n│ SSD       │ /dev/md127  │ /mnt/mount  │ ext4       │ 4.83 TiB / 13.86 TiB (34.86% used)    │\n╰───────────┴─────────────┴─────────────┴────────────┴───────────────────────────────────────╯\n\nGPU:\n╭─────────────────────────┬────────┬───────────╮\n│           Name          │ Vendor │   Memory  │\n├─────────────────────────┼────────┼───────────┤\n│ NVIDIA GeForce RTX 3080 │ NVIDIA │ 9.78 GiB  │\n├─────────────────────────┼────────┼───────────┤\n│ NVIDIA GeForce RTX 3080 │ NVIDIA │ 9.78 GiB  │\n├─────────────────────────┼────────┼───────────┤\n│ NVIDIA GeForce RTX 3080 │ NVIDIA │ 9.78 GiB  │\n╰─────────────────────────┴────────┴───────────╯\n\n\nMemory:\n╭──────────────┬───────────────────┬────────────┬─────────────╮\n│ Total memory │    Used memory    │ Total swap │  Used swap  │\n├──────────────┼───────────────────┼────────────┼─────────────┤\n│ 515.63 GiB   │ 33.51 GiB (6.50%) │ 0 B        │ 0 B (0.00%) │\n╰──────────────┴───────────────────┴────────────┴─────────────╯\n")])])]),a("p",[n._v("从输出 CPU topology 信息来看, 这台机器有两个 NUMANode:")]),n._v(" "),a("ol",[a("li",[n._v("NUMANode #0 的 CPU 集合: 0-31")]),n._v(" "),a("li",[n._v("NUMANode #1 的 CPU 集合: 32-63")])]),n._v(" "),a("p",[n._v("我们可以在 damocles-worker 的配置文件中修改外部执行器配置组 ("),a("RouterLink",{attrs:{to:"/zh/operation/damocles-worker-config.html#processorsstage_name"}},[n._v("[[processors.{stage_name}]]")]),n._v(")\n通过 "),a("code",[n._v("cgroup.cpuset")]),n._v(" + "),a("code",[n._v("numa_preferred")]),n._v(" 配置项限制该外部执行仅使用指定的 NUMANode 中的 CPU, 内存也尽量优先从该 NUMANode 中分配, 进而提高 CPU 工作效率 ("),a("strong",[n._v("damocles v0.5.0 之后，"),a("RouterLink",{attrs:{to:"/zh/operation/hugeTLB.html"}},[n._v("支持加载 NUMA 亲和的 hugepage 内存文件")]),n._v("，如果启用该功能可以跨 NUMA 节点分配 cpuset 不会产生影响")],1),n._v(")。")],1),n._v(" "),a("p",[n._v("例:")]),n._v(" "),a("div",{staticClass:"language-toml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-toml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[n._v("# damocles-worker.toml")]),n._v("\n\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("[")]),n._v("processors"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("stage_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("]")]),n._v("\n"),a("span",{pre:!0,attrs:{class:"token key property"}},[n._v("numa_preferred")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("=")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[n._v("0")]),n._v("\n"),a("span",{pre:!0,attrs:{class:"token key property"}},[n._v("cgroup.cpuset")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("=")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[n._v('"0-3"')]),n._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[n._v("# ...")]),n._v("\n\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("[")]),n._v("processors"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("stage_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("]")]),n._v("\n"),a("span",{pre:!0,attrs:{class:"token key property"}},[n._v("numa_preferred")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("=")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[n._v("1")]),n._v("\n"),a("span",{pre:!0,attrs:{class:"token key property"}},[n._v("cgroup.cpuset")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("=")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[n._v('"32-35"')]),n._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[n._v("# ...")]),n._v("\n")])])]),a("hr"),n._v(" "),a("h2",{attrs:{id:"sealcalc"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sealcalc"}},[n._v("#")]),n._v(" sealcalc")]),n._v(" "),a("p",[n._v("sealcalc 通过给定的参数计算出各个时间段每个阶段任务的运行状态, 可以通过调整各任务的最大并发数量以及 "),a("code",[n._v("sealing_threads")]),n._v(" 来达到封装效率的最大化。")]),n._v(" "),a("p",[n._v("参数说明:")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("USAGE:\n    damocles-worker-util sealcalc [OPTIONS] --tree_d_mins <tree_d_mins> --tree_d_concurrent <tree_d_concurrent> --pc1_mins <pc1_mins> --pc1_concurrent <pc1_concurrent> --pc2_mins <pc2_mins> --pc2_concurrent <pc2_concurrent> --c2_mins <c2_mins> --c2_concurrent <c2_concurrent> --sealing_threads <sealing_threads>\n\nOPTIONS:\n        --c2_concurrent <c2_concurrent>              指定 c2 阶段的最大并发数量\n        --c2_mins <c2_mins>                          指定单次执行 c2 阶段的任务的时间, 单位: 分钟\n        --calculate_days <calculate_days>            计算总时长, 单位: 天 [默认: 30]\n        --calculate_step_mins <calculate_step_mins>  输出的步长, 单位: 分钟 [默认: 60], 如果此值为 60 则每行结果间隔 1 小时\n        --csv                                        以 csv 格式输出结果\n    -h, --help                                       打印帮助信息\n        --pc1_concurrent <pc1_concurrent>            指定 pc1 阶段的最大并发数量\n        --pc1_mins <pc1_mins>                        指定单次执行 pc1 阶段的任务所需的时间, 单位: 分钟\n        --pc2_concurrent <pc2_concurrent>            指定 pc2 阶段的最大并发数量\n        --pc2_mins <pc2_mins>                        指定单次执行 pc2 阶段的任务所需的时间, 单位: 分钟\n        --sealing_threads <sealing_threads>          指定 sealing_threads 工作线程的数量\n        --seed_mins <seed_mins>                      指定等待 seed 的时长, 单位: 分钟 [默认: 80]\n        --tree_d_concurrent <tree_d_concurrent>      指定 tree_d 阶段的最大并发数量\n        --tree_d_mins <tree_d_mins>                  指定单次执行 tree_d 阶段的任务的时间, 单位: 分钟\n")])])]),a("h3",{attrs:{id:"sealcalc-实例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sealcalc-实例"}},[n._v("#")]),n._v(" sealcalc 实例:")]),n._v(" "),a("h4",{attrs:{id:"固定的参数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#固定的参数"}},[n._v("#")]),n._v(" 固定的参数:")]),n._v(" "),a("ul",[a("li",[n._v("tree_d 任务执行所需时间: 10 分钟")]),n._v(" "),a("li",[n._v("pc1 任务执行所需时间: 320 分钟")]),n._v(" "),a("li",[n._v("pc2 任务执行所需时间: 25 分钟")]),n._v(" "),a("li",[n._v("c2  任务执行所需时间: 18 分钟")])]),n._v(" "),a("h4",{attrs:{id:"可调整的参数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#可调整的参数"}},[n._v("#")]),n._v(" 可调整的参数:")]),n._v(" "),a("ul",[a("li",[n._v("sealing_threads 工作线程数量: 18")]),n._v(" "),a("li",[n._v("tree_d 最大并发数: 2")]),n._v(" "),a("li",[n._v("pc1 最大并发数: 10")]),n._v(" "),a("li",[n._v("pc2 最大并发数: 5")]),n._v(" "),a("li",[n._v("c2 最大并发数: 2")])]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("damocles-worker-util sealcalc --tree_d_mins=10 --pc1_mins=320 --pc2_mins=1 --c2_mins=2 --tree_d_concurrent=2 --pc1_concurrent=10 --pc2_concurrent=5 --c2_concurrent=2 --sealing_threads=18\n")])])]),a("p",[n._v("输出如下:")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("┌sealing calculator─────────────────────────────────────────────────────┐\n│time    sealing    tree_d      pc1      pc2     wait    c2     finished│\n│(mins)  threads    (...)      (...)     (...)   seed   (...)   sectors │\n│                                                                       │\n│0       2/18        2/2       0/10       0/5      0     0/2      0     │\n│60      14/18       2/2       10/10      0/5      0     0/2      0     │\n│120     18/18       0/2       10/10      0/5      0     0/2      0     │\n│180     18/18       0/2       10/10      0/5      0     0/2      0     │\n│240     18/18       0/2       10/10      0/5      0     0/2      0     │\n│300     18/18       0/2       10/10      0/5      0     0/2      0     │\n│360     18/18       0/2       10/10      2/5      6     0/2      0     │\n│420     18/18       2/2       8/10       0/5      8     0/2      2     │\n│480     18/18       0/2       10/10      0/5      0     0/2      10    │\n│540     18/18       0/2       10/10      0/5      0     0/2      10    │\n│600     18/18       0/2       10/10      0/5      0     0/2      10    │\n│660     18/18       0/2       10/10      2/5      2     0/2      10    │\n│720     18/18       0/2       10/10      0/5      8     0/2      10    │\n│780     18/18       0/2       10/10      0/5      2     0/2      18    │\n│840     18/18       0/2       10/10      0/5      0     0/2      20    │\n│900     18/18       0/2       10/10      0/5      0     0/2      20    │\n│960     18/18       0/2       10/10      0/5      0     0/2      20    │\n│1020    18/18       0/2       10/10      0/5      8     0/2      20    │\n│1080    18/18       2/2       10/10      0/5      4     0/2      26    │\n│1140    18/18       0/2       10/10      0/5      2     0/2      28    │\n│1200    18/18       0/2       10/10      0/5      0     0/2      30    │\n│1260    18/18       0/2       10/10      0/5      0     0/2      30    │\n│1320    18/18       0/2       10/10      2/5      6     0/2      30    │\n│1380    18/18       2/2       10/10      0/5      6     0/2      32    │\n│1440    18/18       0/2       10/10      0/5      2     0/2      38    │\n│1500    18/18       0/2       10/10      0/5      0     0/2      40    │\n│1560    18/18       0/2       10/10      0/5      0     0/2      40    │\n│1620    18/18       0/2       10/10      2/5      2     0/2      40    │\n│1680    18/18       0/2       10/10      0/5      8     0/2      40    │\n│1740    18/18       0/2       10/10      0/5      2     0/2      48    │\n└───────────────────────────────────────────────────────────────────────┘\n")])])]),a("p",[a("em",[n._v("方向键可以翻页")])]),n._v(" "),a("p",[n._v("输出结果各列说明:")]),n._v(" "),a("ul",[a("li",[n._v("time (mins): 时间，单位分钟。 输出的每一项数据都是在此时间的运行结果")]),n._v(" "),a("li",[n._v("sealing thread (running/total): 封装线程状态 (正在运行的线程/总线程)")]),n._v(" "),a("li",[n._v("tree_d (running/total): tree_d 阶段的任务状态 (正在运行的任务数量/总任务数量)")]),n._v(" "),a("li",[n._v("pc1 (running/total): pc1 阶段的任务状态 (正在运行的任务数量/总任务数量)")]),n._v(" "),a("li",[n._v("pc2 (running/total): pc2 阶段的任务状态 (正在运行的任务数量/总任务数量)")]),n._v(" "),a("li",[n._v("wait seed: 等待 seed 的任务数量")]),n._v(" "),a("li",[n._v("c2 (running/total): c2 阶段的任务状态 (正在运行的任务数量/总任务数量)")]),n._v(" "),a("li",[n._v("finish sector: 当前时间已完成的扇区")])]),n._v(" "),a("p",[n._v("我们可以通过不断的调整更合理的上述的"),a("a",{attrs:{href:"#%E5%8F%AF%E8%B0%83%E6%95%B4%E7%9A%84%E5%8F%82%E6%95%B0"}},[n._v("可调整的参数")]),n._v(", 来达到封装效率的最大化。 这些参数可以给 damocles-worker 的配置作为参考。")])])}),[],!1,null,null,null);t.default=e.exports}}]);