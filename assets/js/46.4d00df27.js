(window.webpackJsonp=window.webpackJsonp||[]).push([[46],{431:function(e,t,n){"use strict";n.r(t);var a=n(17),s=Object(a.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"任务状态流转"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#任务状态流转"}},[e._v("#")]),e._v(" 任务状态流转")]),e._v(" "),n("p",[e._v("了解任务的状态流转，有助于使用者了解 "),n("code",[e._v("damocles-worker")]),e._v(" 的状态，并对暂停的扇区任务进行有针对性的恢复。")]),e._v(" "),n("p",[e._v("任务的状态流转，和任务的类型有关，即 "),n("RouterLink",{attrs:{to:"/zh/operation/damocles-worker-config.html#基础配置范例-3"}},[n("code",[e._v("sealing_thread")]),e._v(" 中的 "),n("code",[e._v("plan")]),e._v(" 选项")]),e._v("，因此我们将会分别描述。")],1),e._v(" "),n("p",[e._v("在下面的描述中，以 "),n("code",[e._v("State::")]),e._v(" 为 前缀出现的，是状态，以 "),n("code",[e._v("Event::")]),e._v(" 为前缀出现的，是事件或过程。类似")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("State::A => {\n\tEvent::B => State::C,\n\tEvent::D => State::E,\n}\n")])])]),n("p",[e._v("表示：")]),e._v(" "),n("p",[e._v("当任务处于 "),n("code",[e._v("A")]),e._v(" 状态时")]),e._v(" "),n("ol",[n("li",[e._v("如果出现 "),n("code",[e._v("B")]),e._v(" 事件，则转向 "),n("code",[e._v("C")]),e._v(" 状态")]),e._v(" "),n("li",[e._v("如果出现 "),n("code",[e._v("D")]),e._v(" 事件，则转向 "),n("code",[e._v("E")]),e._v(" 状态")])]),e._v(" "),n("p",[e._v("同时还需要说明：")]),e._v(" "),n("ol",[n("li",[n("p",[e._v("每种状态，都可能发生向一个或多个其他状态的转换，即 "),n("code",[e._v("{}")]),e._v(" 中可能出现一行或多行")])]),e._v(" "),n("li",[n("p",[e._v("除了罗列出来的具体状态，还存在一些特殊状态，如：")]),e._v(" "),n("ul",[n("li",[n("p",[n("code",[e._v("State::Aborted")]),e._v("，表示扇区未正常完成")]),e._v(" "),n("ol",[n("li",[n("p",[e._v("任何逻辑判断中，属于 "),n("code",[e._v("abort")]),e._v(" 级别的异常，都会使得任务转为 "),n("code",[e._v("Aborted")]),e._v(" 状态，任务将被终止，当前 "),n("code",[e._v("sealing_thread")]),e._v(" 将会转向下一任务")])]),e._v(" "),n("li",[n("p",[e._v("使用者向暂停中的任务发送恢复指令时，如果附带 "),n("code",[e._v("Aborted")]),e._v(" 状态，也会实现上述效果")]),e._v(" "),n("p",[e._v("因此使用者可以利用这一机制来处理难以恢复，但又尚未被定义为 "),n("code",[e._v("abort")]),e._v(" 级别的异常")])])])]),e._v(" "),n("li",[n("p",[n("code",[e._v("State::Finished")]),e._v(" 表示扇区正常完成")])])])])]),e._v(" "),n("h2",{attrs:{id:"封装-sealer-任务的状态流转"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#封装-sealer-任务的状态流转"}},[e._v("#")]),e._v(" 封装（sealer）任务的状态流转")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// 空状态，即尚未分配扇区\nState::Empty => {\n\t// 申请新扇区\n\tEvent::Allocate(_) => State::Allocated,\n},\n\n// 新扇区已分配\nState::Allocated => {\n\t// 申请订单\n\tEvent::AcquireDeals(_) => State::DealsAcquired,\n},\n\n// 订单已申请\nState::DealsAcquired => {\n\t// 填充 piece 数据\n\tEvent::AddPiece(_) => State::PieceAdded,\n},\n\n// 数据已填充\nState::PieceAdded => {\n\t// 构造 TreeD\n\tEvent::BuildTreeD => State::TreeDBuilt,\n},\n\n// TreeD 已生成\nState::TreeDBuilt => {\n\t// 申请 pc1 所需的链上随机数\n\tEvent::AssignTicket(_) => State::TicketAssigned,\n},\n\n// pc1 所需的链上随机数已获得\nState::TicketAssigned => {\n\t// 执行 pc1\n\tEvent::PC1(_, _) => State::PC1Done,\n},\n\n// pc1 已完成\nState::PC1Done => {\n\t// 执行 pc2\n\tEvent::PC2(_) => State::PC2Done,\n},\n\n// pc2 已完成\nState::PC2Done => {\n\t// 提交 PreCommit 上链信息\n\tEvent::SubmitPC => State::PCSubmitted,\n},\n\n// PreCommit 上链信息已提交\nState::PCSubmitted => {\n\t// 上链失败，需要重新提交\n\tEvent::ReSubmitPC => State::PC2Done,\n\t// 上链成功\n\tEvent::CheckPC => State::PCLanded,\n},\n\n// PreCommit 信息已上链\nState::PCLanded => {\n\t// 执行扇区文件持久化\n\tEvent::Persist(_) => State::Persisted,\n},\n\n// 扇区文件已持久化\nState::Persisted => {\n\t// 通过持久化文件检查\n\tEvent::SubmitPersistance => State::PersistanceSubmitted,\n},\n\n// 持久化文件已确认\nState::PersistanceSubmitted => {\n\t// 申请 c1 所需的链上随机数\n\tEvent::AssignSeed(_) => State::SeedAssigned,\n},\n\n// c1 所需的链上随机数已获得\nState::SeedAssigned => {\n\t// 执行 c1\n\tEvent::C1(_) => State::C1Done,\n},\n\n// c1 已完成\nState::C1Done => {\n\t// 执行 c2\n\tEvent::C2(_) => State::C2Done,\n},\n\n// c2 已完成\nState::C2Done => {\n\t// 提交 CommitProof 信息\n\tEvent::SubmitProof => State::ProofSubmitted,\n},\n\n// CommitProof 信息已提交\nState::ProofSubmitted => {\n\t// 上链失败，需要重新提交 \n\tEvent::ReSubmitProof => State::C2Done,\n\t// 上链成功或跳过上链检查\n\tEvent::Finish => State::Finished,\n},\n")])])]),n("h2",{attrs:{id:"升级-snapup-任务的状态流转"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#升级-snapup-任务的状态流转"}},[e._v("#")]),e._v(" 升级（snapup）任务的状态流转")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// 空状态，即尚未分配扇区\nState::Empty => {\n\t// 分配用于升级的扇区和订单\n\tEvent::AllocatedSnapUpSector(_, _, _) => State::Allocated,\n},\n\n// 升级扇区和订单已分配\nState::Allocated => {\n\t// 填充 piece 数据\n\tEvent::AddPiece(_) => State::PieceAdded,\n},\n\n// 数据已填充\nState::PieceAdded => {\n\t// 构造 TreeD\n\tEvent::BuildTreeD => State::TreeDBuilt,\n},\n\n// TreeD 已生成\nState::TreeDBuilt => {\n\t// 执行 Snap 编码\n\tEvent::SnapEncode(_) => State::SnapEncoded,\n},\n\n// Snap 编码已完成\nState::SnapEncoded => {\n\t// 执行 Snap 证明\n\tEvent::SnapProve(_) => State::SnapProved,\n},\n\n// Snap 证明已生成\nState::SnapProved => {\n\t// 执行扇区文件持久化\n\tEvent::Persist(_) => State::Persisted,\n},\n\n// 扇区文件已持久化\nState::Persisted => {\n\t// 文件未通过检查\n\tEvent::RePersist => State::SnapProved,\n\t// 文件已通过检查\n\tEvent::Finish => State::Finished,\n},\n")])])]),n("h2",{attrs:{id:"重建-rebuild-任务的状态流转"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#重建-rebuild-任务的状态流转"}},[e._v("#")]),e._v(" 重建（rebuild）任务的状态流转")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// 空状态，即尚未分配扇区\nState::Empty => {\n\t// 分配用于重建的扇区信息\n\tEvent::AllocatedRebuildSector(_) => State::Allocated,\n},\n\n// 重建扇区已分配\nState::Allocated => {\n\t// 填充 piece 数据\n\tEvent::AddPiece(_) => State::PieceAdded,\n},\n\n// 数据已填充\nState::PieceAdded => {\n\t// 构造 TreeD\n\tEvent::BuildTreeD => State::TreeDBuilt,\n},\n\n// TreeD 已生成\nState::TreeDBuilt => {\n\t// 执行 pc1\n\tEvent::PC1(_, _) => State::PC1Done,\n},\n\n// pc1 已完成\nState::PC1Done => {\n\t// 执行 pc2\n\tEvent::PC2(_) => State::PC2Done,\n},\n\n// pc2 已完成\nState::PC2Done => {\n\t// 检查 sealed 文件（执行 c1）\n\tEvent::CheckSealed => State::SealedChecked,\n},\n\n// sealed 文件已检查（c1 已完成）\nState::SealedChecked => {\n\t// 非升级扇区，跳过 snapup 相关步骤\n\tEvent::SkipSnap => State::SnapDone,\n\t// 升级扇区，填充 piece 数据\n\tEvent::AddPiece(_) => State::SnapPieceAdded,\n},\n\n// 数据已填充（仅升级扇区）\nState::SnapPieceAdded => {\n\t// 构造 TreeD（仅升级扇区）\n\tEvent::BuildTreeD => State::SnapTreeDBuilt,\n},\n\n// TreeD 已生成（仅升级扇区）\nState::SnapTreeDBuilt => {\n\t// 执行 Snap 编码（仅升级扇区）\n\tEvent::SnapEncode(_) => State::SnapEncoded,\n},\n\n// Snap 编码已完成（仅升级扇区）\nState::SnapEncoded => {\n\t// 执行 Snap 证明（仅升级扇区）\n\tEvent::SnapProve(_) => State::SnapDone,\n},\n\n// snapup 已完成或不需要\nState::SnapDone => {\n\t// 执行扇区文件持久化\n\tEvent::Persist(_) => State::Persisted,\n},\n\n// 扇区文件已持久化\nState::Persisted => {\n\t// 通过持久化文件检查\n\tEvent::SubmitPersistance => State::Finished,\n},\n")])])]),n("h2",{attrs:{id:"unseal-任务的状态流转"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#unseal-任务的状态流转"}},[e._v("#")]),e._v(" Unseal 任务的状态流转")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// 空状态，即尚未分配扇区\nState::Empty => {\n\t// 分配用于 Unseal 任务\n\tEvent::AllocatedUnsealSector(_) => State::Allocated,\n},\n\n// Unseal 任务已分配\nState::Allocated => {\n\t// 执行 Unseal 算法\n\tEvent::UnsealDone(_) => State::Unsealed,\n},\n\n// unseal 算法执行完成\nState::Unsealed => {\n\t// 上传 piece 数据到指定位置\n\tEvent::UploadPieceDone => State::Finished,\n},\n")])])]),n("h2",{attrs:{id:"与-worker-管理工具结合的使用范例"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#与-worker-管理工具结合的使用范例"}},[e._v("#")]),e._v(" 与 worker 管理工具结合的使用范例")]),e._v(" "),n("h4",{attrs:{id:"_1-对于一个已经报错暂停-且无法恢复的扇区封装任务-如-ticket-已过期-可以通过"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-对于一个已经报错暂停-且无法恢复的扇区封装任务-如-ticket-已过期-可以通过"}},[e._v("#")]),e._v(" 1. 对于一个已经报错暂停，且无法恢复的扇区封装任务，如 ticket 已过期，可以通过")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("damocles-worker worker resume --state Aborted --index <index>\n")])])]),n("p",[e._v("或")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("damocles-manager util worker resume <worker instance name or address> <thread index> Aborted\n")])])]),n("p",[e._v("终止当前任务。")]),e._v(" "),n("h4",{attrs:{id:"_2-对于一个已经报错暂停-但认为可以重新从之前某个阶段开始重试的扇区封装任务-同样如-ticket-已过期-可以通过"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-对于一个已经报错暂停-但认为可以重新从之前某个阶段开始重试的扇区封装任务-同样如-ticket-已过期-可以通过"}},[e._v("#")]),e._v(" 2. 对于一个已经报错暂停，但认为可以重新从之前某个阶段开始重试的扇区封装任务，同样如 ticket 已过期，可以通过")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("damocles-worker worker resume --state TreeDBuilt --index <index>\n")])])]),n("p",[e._v("或")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("damocles-manager util worker resume <worker instance name or address> <thread index> TreeDBuilt\n")])])]),n("p",[e._v("令其回退到之前的状态进行尝试。")])])}),[],!1,null,null,null);t.default=s.exports}}]);